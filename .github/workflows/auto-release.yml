name: Auto Release with SemVer

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Increment version
        id: increment_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          IFS='.' read -ra VERSION_PARTS <<< "${latest_tag#v}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="v$MAJOR.$NEW_MINOR.0"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: generate_release_notes
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          if [ "$latest_tag" = "v0.0.0" ]; then
            release_notes=$(git log --pretty=format:"- %s%n%b")
          else
            release_notes=$(git log ${latest_tag}..HEAD --pretty=format:"- %s%n%b")
          fi
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$release_notes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ steps.increment_version.outputs.new_version }}
          release_name: Release ${{ steps.increment_version.outputs.new_version }}
          body: |
            ${{ steps.generate_release_notes.outputs.release_notes }}
          draft: false
          prerelease: false
